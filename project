# Now
 [1] The interface to a Git repository is named `Repository`.
 [5] A notification is raised if a compilation fails.
 [5] A notification is raised if a test fails.
 [8] A filter may be applied to the output of a compilation or a test.

# Git
 * I can open a connection to a Git repository.
 * I can pull the status of a repository.
 * I can trigger a fetch on a repository.
 * When a notification is raised it is sent to `std::cout`.

# Local
 [8] [File] I can monitor a path for changes; I am having trouble getting the CoreFoundation interface to work... perhaps I should use the Objective-C interface.
 [5] [Process] I can run node as a child process.
 [5] [Process] I can serve up a view of the internal status from a node server running as a child process.
 * A notification is raised when a tag (@!-, @?-) is committed.
 * A notification is raised when a change is committed.
 * I can see a running graph from performance tests.
 * I can see any missing symbols that the linker fails on.
 * I can see any syntax errors that the linker fails on.
 * When a test crashes I can run an `lldb` session that runs just the test that crashed.
 * When a test crashes I get a backtrace from the moment the crash occurred.

# Remote
 * A notification is raised when there are new changes to pull.

# UI
 [8] I have investigated the macOS API available to create a small window at the bottom right.

# Community
 * I can annotate a hash.
 * I can annotate a set of lines within a hash.
 * I can send a notification to a Slack channel.
 * I can send a notification as an email.

----

# Twit
A small local daemon that tells you things about your codebase as they happen.
